name: github-pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   env:
  #     GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: gsutil-setup
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         service_account_key: ${{ secrets.GCS_SA_KEY }}
  #         project_id: ${{ secrets.GCS_PROJECT }}
  #         export_default_credentials: true

  #     - name: test
  #       run: |
  #         ./update.sh   # Clone all the git submodules.
  #         lsb_release -a
  #         sudo apt-get update && sudo apt-get install -y bash binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake
  #         git clone https://github.com/SimonKagstrom/kcov.git
  #         cd kcov && mkdir build && cd build && cmake .. && make -j4 && sudo make install && cd ../..
  #         rustc --version && cargo --version  # Display rustc and cargo versions.
  #         cd nov
  #         RUSTFLAGS='-C link-dead-code' cargo test --workspace --verbose  # Run the project's test suite with cargo. If any of these tests fail, we stop here.
  #         for i in `ls -rt target/debug/deps/libnov-* | sed '/\./d' | tail -n 1`; do kcov --exclude-pattern=/usr target/cov $i; done   # Generate the test coverage report with kcov for library.
  #         for i in `find target/cov -maxdepth 1 -type l`; do unlink $i; done  # Remove bad symlinks which are made by kcov for some reason.
  #         COVERAGE=$(grep -P 'percent_covered\"' target/cov/libnov*/coverage.json | grep -Po '[0-9]+.[0-9]+' | tail -n 1 | tr -d '\n')
  #         COLOUR=$(if (( `echo "$COVERAGE < 75" | bc -l` )); then echo "red"; elif (( `echo "$COVERAGE < 90" | bc -l` )); then echo "yellow"; else echo "green"; fi)
  #         echo "COLOUR=\"$COLOUR\""
  #         curl "https://img.shields.io/badge/github_coverage-$COVERAGE%25-$COLOUR" > github-coverage.svg
  #         gsutil -h "Cache-Control:public, max-age=60" cp github-coverage.svg gs://$GCS_BUCKET
  #         gsutil -h "Cache-Control:public, max-age=60" -m rsync -d -r target/cov gs://$GCS_BUCKET/cov
  #         echo "Coverage: $COVERAGE"  # Output the amount of test coverage in percent. This exact output format is expected by a setting we set on the GitLab CI/CD website.
  #         cd ..

  #     - name: artifacts-badge
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage-badge
  #         path: |
  #           nov/github-coverage.svg

  #     - name: artifacts-coverage
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage
  #         path: |
  #           nov/target/cov

  # docs:
  #   # needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: docs
  #     run: |
  #       ./update.sh   # Clone all the git submodules.
  #       sudo apt-get update && sudo apt-get install -y libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
  #       rustc --version && cargo --version  # Display rustc and cargo versions.
  #       cd nob && cargo doc --workspace --verbose && cd ..   # Generate the project's docs with the cargo doc command.
  #       cd nov && cargo doc --workspace --verbose && cd ..

  # - name: nob-docs
  #   uses: actions/upload-artifact@v2
  #   with:
  #     name: coverage
  #     path: |
  #       nob/target/doc

  # - name: nov-docs
  #   uses: actions/upload-artifact@v2
  #   with:
  #     name: coverage
  #     path: |
  #       nov/target/doc

  debug-linux-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: add-path
        run: |
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH

      - name: debug-linux-x86_64
        run: |
          ./update.sh   # Clone all the git submodules.
          sudo apt-get update && sudo apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python-openssl libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
          unset PYENV_ROOT
          cd libnov && source ./install-python.sh && cd ..
          echo "PATH=\"$PATH\""
          python -V
          pyenv rehash
          python -V
          pyenv version
          pyenv which python
          echo $(pyenv which python)
          $(pyenv which python) -V
          export PYTHON_SYS_EXECUTABLE="$(pyenv which python)"
          export PYTHONPATH="$PWD/libnov/data/src:$PYTHONPATH"
          ls -al "$HOME/.pyenv/bin"
          ls -al "$HOME/.pyenv/shims"
          rustc --version && cargo --version  # Display rustc and cargo versions.
          cd nob && RUST_BACKTRACE=full cargo build --verbose && cd ..   # Build the project with the cargo build command.
          cd nov
          export LIBPYTHON_DIR="$(pyenv prefix)/lib"
          ls -al "$LIBPYTHON_DIR"
          cd ..
          cd nov && RUST_BACKTRACE=full cargo build --features vulkan,python --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-gl cargo build --features gl,python --verbose && cd ..
          mkdir -p hobnob/hobnob
          cp -r libnov/data hobnob/hobnob
          cp -r libnov/shader hobnob/hobnob
          cp nob/target/debug/nob hobnob/hobnob
          cp nov/target/debug/nov hobnob/hobnob
          cp nov/target-gl/debug/nov hobnob/hobnob/nov-gl
          chmod 755 hobnob/hobnob/nob
          chmod 755 hobnob/hobnob/nov
          chmod 755 hobnob/hobnob/nov-gl
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nob\n" | tee hobnob/hobnob/nob.sh
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nov\n" | tee hobnob/hobnob/hobnob.sh
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nov-gl\n" | tee hobnob/hobnob/hobnob-gl.sh
          chmod 755 hobnob/hobnob/nob.sh
          chmod 755 hobnob/hobnob/hobnob.sh
          chmod 755 hobnob/hobnob/hobnob-gl.sh

      - name: hobnob-debug-linux-x86_64
        uses: actions/upload-artifact@v2
        with:
          name: hobnob-debug-linux-x86_64
          path: |
            hobnob

  debug-windows-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: add-path
        run: |
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH

      - name: debug-windows-x86_64
        run: |
          ./update.sh   # Clone all the git submodules.
          sudo apt-get update && sudo apt-get install -y --no-install-recommends make build-essential mingw-w64 libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python-openssl libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
          unset PYENV_ROOT
          cd libnov && source ./install-python.sh && cd ..
          cd libnov && ./install-python-cross-win64.sh && cd ..
          echo "PATH=\"$PATH\""
          python -V
          pyenv rehash
          python -V
          pyenv version
          pyenv which python
          echo $(pyenv which python)
          $(pyenv which python) -V
          echo "Setting Python variables..."
          echo "PWD=$PWD"
          echo ""
          ls -al "$PWD"
          echo ""
          ls -al "$PWD/nov"
          echo ""
          ls -al "$PWD/nov/python-cross-win64"
          echo ""
          export PYO3_CROSS_INCLUDE_DIR="$(pyenv prefix)/include/python3.9"
          export PYO3_CROSS_LIB_DIR="$PWD/nov/python-cross-win64"
          export PYTHONHOME="$PWD/nov/python-cross-win64/Python-3.9.1"
          export PYTHONPATH="$PWD/nov/python-cross-win64/Python-3.9.1:$PWD/libnov/data/src:$PYTHONPATH"
          export PYTHON_SYS_EXECUTABLE="$PWD/nov/python-cross-win64/python.exe"
          ls -al "$HOME/.pyenv/bin"
          ls -al "$HOME/.pyenv/shims"
          rustup target add x86_64-pc-windows-gnu   # Add the mingw-w64 Rust target to cargo with the rustup command.
          rustup toolchain install stable-x86_64-pc-windows-gnu   # Install the Rust Windows cross-compiling tools for cargo with the rustup command.
          rustc --version && cargo --version  # Display rustc and cargo versions.
          cd nob && RUST_BACKTRACE=full cargo build --target x86_64-pc-windows-gnu --verbose && cd ..   # Cross-compile the project for Windows, from Linux, with the cargo build command.
          cd nov
          cd ..
          cd nov && RUST_BACKTRACE=full cargo build --features vulkan,python --target x86_64-pc-windows-gnu --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-dx12 cargo build --features dx12,python --target x86_64-pc-windows-gnu --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-dx11 cargo build --features dx11,python --target x86_64-pc-windows-gnu --verbose && cd ..
          mkdir -p hobnob/hobnob
          cp nov/target/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob
          cp nob/target/x86_64-pc-windows-gnu/debug/nob.exe hobnob/hobnob
          cp -r libnov/data hobnob/hobnob
          cp -r libnov/shader hobnob/hobnob
          cp -r nov/python-cross-win64 hobnob/hobnob/python
          cp nov/target-dx12/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob/nov-dx12.exe
          cp nov/target-dx11/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob/nov-dx11.exe
          cp nov/target/x86_64-pc-windows-gnu/debug/python39.dll hobnob/hobnob
          cp nov/target/x86_64-pc-windows-gnu/debug/python3.9.dll hobnob/hobnob
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nob.exe\nendlocal\n" | tee hobnob/hobnob/nob.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov.exe\nendlocal\n" | tee hobnob/hobnob/hobnob.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov-dx12.exe\nendlocal\n" | tee hobnob/hobnob/hobnob-dx12.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov-dx11.exe\nendlocal\n" | tee hobnob/hobnob/hobnob-dx11.bat

      - name: hobnob-debug-windows-x86_64
        uses: actions/upload-artifact@v2
        with:
          name: hobnob-debug-windows-x86_64
          path: |
            hobnob

  release-linux-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: add-path
        run: |
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH

      - name: release-linux-x86_64
        run: |
          ./update.sh   # Clone all the git submodules.
          sudo apt-get update && sudo apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python-openssl libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
          unset PYENV_ROOT
          cd libnov && source ./install-python.sh && cd ..
          echo "PATH=\"$PATH\""
          python -V
          pyenv rehash
          python -V
          pyenv version
          pyenv which python
          echo $(pyenv which python)
          $(pyenv which python) -V
          export PYTHON_SYS_EXECUTABLE="$(pyenv which python)"
          export PYTHONPATH="$PWD/libnov/data/src:$PYTHONPATH"
          ls -al "$HOME/.pyenv/bin"
          ls -al "$HOME/.pyenv/shims"
          rustc --version && cargo --version  # Display rustc and cargo versions.
          cd nob && RUST_BACKTRACE=full cargo build --release --verbose && cd ..   # Build the project with the cargo build command.
          cd nov
          export LIBPYTHON_DIR="$(pyenv prefix)/lib"
          ls -al "$LIBPYTHON_DIR"
          cd ..
          cd nov && RUST_BACKTRACE=full cargo build --release --features vulkan,python --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-gl cargo build --release --features gl,python --verbose && cd ..
          strip -s nob/target/release/nob
          strip -s nov/target/release/nov
          strip -s nov/target-gl/release/nov
          mkdir -p hobnob/hobnob
          cp -r libnov/data hobnob/hobnob
          cp -r libnov/shader hobnob/hobnob
          cp nob/target/release/nob hobnob/hobnob
          cp nov/target/release/nov hobnob/hobnob
          cp nov/target-gl/release/nov hobnob/hobnob/nov-gl
          chmod 755 hobnob/hobnob/nob
          chmod 755 hobnob/hobnob/nov
          chmod 755 hobnob/hobnob/nov-gl
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nob\n" | tee hobnob/hobnob/nob.sh
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nov\n" | tee hobnob/hobnob/hobnob.sh
          printf "#!/bin/bash\n\nPYTHONPATH=\"$PWD/data/src:$PYTHONPATH\" ./nov-gl\n" | tee hobnob/hobnob/hobnob-gl.sh
          chmod 755 hobnob/hobnob/nob.sh
          chmod 755 hobnob/hobnob/hobnob.sh
          chmod 755 hobnob/hobnob/hobnob-gl.sh

      - name: hobnob-release-linux-x86_64
        uses: actions/upload-artifact@v2
        with:
          name: hobnob-release-linux-x86_64
          path: |
            hobnob

  release-windows-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: add-path
        run: |
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
          echo "$HOME/.pyenv/shims" >> $GITHUB_PATH

      - name: release-windows-x86_64
        run: |
          ./update.sh   # Clone all the git submodules.
          sudo apt-get update && sudo apt-get install -y --no-install-recommends make build-essential mingw-w64 libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python-openssl libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
          unset PYENV_ROOT
          cd libnov && source ./install-python.sh && cd ..
          cd libnov && ./install-python-cross-win64.sh && cd ..
          echo "PATH=\"$PATH\""
          python -V
          pyenv rehash
          python -V
          pyenv version
          pyenv which python
          echo $(pyenv which python)
          $(pyenv which python) -V
          echo "Setting Python variables..."
          echo "PWD=$PWD"
          echo ""
          ls -al "$PWD"
          echo ""
          ls -al "$PWD/nov"
          echo ""
          ls -al "$PWD/nov/python-cross-win64"
          echo ""
          export PYO3_CROSS_INCLUDE_DIR="$(pyenv prefix)/include/python3.9"
          export PYO3_CROSS_LIB_DIR="$PWD/nov/python-cross-win64"
          export PYTHONHOME="$PWD/nov/python-cross-win64/Python-3.9.1"
          export PYTHONPATH="$PWD/nov/python-cross-win64/Python-3.9.1:$PWD/libnov/data/src:$PYTHONPATH"
          export PYTHON_SYS_EXECUTABLE="$PWD/nov/python-cross-win64/python.exe"
          ls -al "$HOME/.pyenv/bin"
          ls -al "$HOME/.pyenv/shims"
          rustup target add x86_64-pc-windows-gnu   # Add the mingw-w64 Rust target to cargo with the rustup command.
          rustup toolchain install stable-x86_64-pc-windows-gnu   # Install the Rust Windows cross-compiling tools for cargo with the rustup command.
          rustc --version && cargo --version  # Display rustc and cargo versions.
          cd nob && RUST_BACKTRACE=full cargo build --release --target x86_64-pc-windows-gnu --verbose && cd ..   # Cross-compile the project for Windows, from Linux, with the cargo build command.
          cd nov
          cd ..
          cd nov && RUST_BACKTRACE=full cargo build --release --features vulkan,python --target x86_64-pc-windows-gnu --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-dx12 cargo build --release --features dx12,python --target x86_64-pc-windows-gnu --verbose && cd ..
          cd nov && RUST_BACKTRACE=full CARGO_TARGET_DIR=target-dx11 cargo build --release --features dx11,python --target x86_64-pc-windows-gnu --verbose && cd ..
          strip -s nob/target/x86_64-pc-windows-gnu/release/nob.exe
          strip -s nov/target/x86_64-pc-windows-gnu/release/nov.exe
          strip -s nov/target-dx12/x86_64-pc-windows-gnu/release/nov.exe
          strip -s nov/target-dx11/x86_64-pc-windows-gnu/release/nov.exe
          mkdir -p hobnob/hobnob
          cp -r libnov/data hobnob/hobnob
          cp -r libnov/shader hobnob/hobnob
          cp -r nov/python-cross-win64 hobnob/hobnob/python
          cp nob/target/x86_64-pc-windows-gnu/release/nob.exe hobnob/hobnob
          cp nov/target/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob
          cp nov/target-dx12/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob/nov-dx12.exe
          cp nov/target-dx11/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob/nov-dx11.exe
          cp nov/target/x86_64-pc-windows-gnu/release/python39.dll hobnob/hobnob
          cp nov/target/x86_64-pc-windows-gnu/release/python3.9.dll hobnob/hobnob
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nob.exe\nendlocal\n" | tee hobnob/hobnob/nob.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov.exe\nendlocal\n" | tee hobnob/hobnob/hobnob.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov-dx12.exe\nendlocal\n" | tee hobnob/hobnob/hobnob-dx12.bat
          printf "@echo off\nsetlocal\nset PYTHONPATH=%%cd%%\\python:%%cd%%\\data\\src&& set PYTHONHOME=%%cd%%\\python\\Python-3.9.1&& nov-dx11.exe\nendlocal\n" | tee hobnob/hobnob/hobnob-dx11.bat

      - name: hobnob-release-windows-x86_64
        uses: actions/upload-artifact@v2
        with:
          name: hobnob-release-windows-x86_64
          path: |
            hobnob
