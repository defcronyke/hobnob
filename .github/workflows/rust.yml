name: github-pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   env:
  #     GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: gsutil-setup
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         service_account_key: ${{ secrets.GCS_SA_KEY }}
  #         project_id: ${{ secrets.GCS_PROJECT }}
  #         export_default_credentials: true
      
  #     - name: test
  #       run: |
  #         ./update.sh   # Clone all the git submodules.
  #         lsb_release -a
  #         sudo apt-get update && sudo apt-get install -y bash binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake
  #         git clone https://github.com/SimonKagstrom/kcov.git
  #         cd kcov && mkdir build && cd build && cmake .. && make -j4 && sudo make install && cd ../..
  #         rustc --version && cargo --version  # Display rustc and cargo versions.
  #         cd nov
  #         RUSTFLAGS='-C link-dead-code' cargo test --workspace --verbose  # Run the project's test suite with cargo. If any of these tests fail, we stop here.
  #         for i in `ls -rt target/debug/deps/libnov-* | sed '/\./d' | tail -n 1`; do kcov --exclude-pattern=/usr target/cov $i; done   # Generate the test coverage report with kcov for library.
  #         for i in `find target/cov -maxdepth 1 -type l`; do unlink $i; done  # Remove bad symlinks which are made by kcov for some reason.
  #         COVERAGE=$(grep -P 'percent_covered\"' target/cov/libnov*/coverage.json | grep -Po '[0-9]+.[0-9]+' | tail -n 1 | tr -d '\n')
  #         COLOUR=$(if (( `echo "$COVERAGE < 75" | bc -l` )); then echo "red"; elif (( `echo "$COVERAGE < 90" | bc -l` )); then echo "yellow"; else echo "green"; fi)
  #         echo "COLOUR=\"$COLOUR\""
  #         curl "https://img.shields.io/badge/github_coverage-$COVERAGE%25-$COLOUR" > github-coverage.svg
  #         gsutil -h "Cache-Control:public, max-age=60" cp github-coverage.svg gs://$GCS_BUCKET
  #         gsutil -h "Cache-Control:public, max-age=60" -m rsync -d -r target/cov gs://$GCS_BUCKET/cov
  #         echo "Coverage: $COVERAGE"  # Output the amount of test coverage in percent. This exact output format is expected by a setting we set on the GitLab CI/CD website.
  #         cd ..
      
  #     - name: artifacts-badge
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage-badge
  #         path: |
  #           nov/github-coverage.svg

  #     - name: artifacts-coverage
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage
  #         path: |
  #           nov/target/cov

  # docs:
  #   # needs: test
  #   runs-on: ubuntu-latest
  #   steps:      
  #   - uses: actions/checkout@v2
    
  #   - name: docs
  #     run: |
  #       ./update.sh   # Clone all the git submodules.
  #       sudo apt-get update && sudo apt-get install -y libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
  #       rustc --version && cargo --version  # Display rustc and cargo versions.
  #       cd nob && cargo doc --workspace --verbose && cd ..   # Generate the project's docs with the cargo doc command.
  #       cd nov && cargo doc --workspace --verbose && cd ..

    # - name: nob-docs
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: coverage
    #     path: |
    #       nob/target/doc

    # - name: nov-docs
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: coverage
    #     path: |
    #       nov/target/doc

  debug-linux-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: add-path
      run: |
        echo "$HOME/.pyenv/bin" >> $GITHUB_PATH
        echo "$HOME/.pyenv/shims" >> $GITHUB_PATH

    - name: debug-linux-x86_64
      run: |
        ./update.sh   # Clone all the git submodules.
        sudo apt-get update && sudo apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python-openssl libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
        unset PYENV_ROOT
        cd libnov && source ./install-python.sh && cd ..
        echo "PATH=\"$PATH\""
        which python
        python -V
        pyenv version
        export PYTHON_SYS_EXECUTABLE="$(which python)"
        ls -al "$HOME/.pyenv/bin"
        ls -al "$HOME/.pyenv/shims"
        # exec "$SHELL"
        # source $HOME/.bashrc
        # echo "PATH=\"$PATH\""
        rustc --version && cargo --version  # Display rustc and cargo versions.
        cd nob && cargo build --verbose && cd ..   # Build the project with the cargo build command.
        # LIBPYTHON_DIR="$(pyenv prefix)/lib"
        # LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//')
        cd nov
        export LIBPYTHON_DIR="$(pyenv prefix)/lib"
        ls -al "$LIBPYTHON_DIR"
        export LIBPYTHON_NAME="$(basename $(ls -1t $(pyenv prefix)/lib/libpython*.a | head -n 1) | sed 's/lib//' | sed 's/\.a//')"
        # export LIBPYTHON_NAME="$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1))"
        cat ".cargo/config.tmpl" | \
        sed "s@{LIBPYTHON_DIR}@$LIBPYTHON_DIR@g" | \
        sed "s@{LIBPYTHON_NAME}@$LIBPYTHON_NAME@g" | \
        tee ".cargo/config"
        echo "LIBPYTHON_DIR=\"$LIBPYTHON_DIR\""
        echo "LIBPYTHON_NAME=\"$LIBPYTHON_NAME\""
        cat ".cargo/config"
        cd ..
        cd nov && cargo build --features vulkan,python --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-gl cargo build --features gl,python --verbose && cd ..
        mkdir -p hobnob/hobnob
        cp nov/target/debug/nov hobnob/hobnob
        cp nob/target/debug/nob hobnob/hobnob
        cp -r libnov/data hobnob/hobnob
        cp -r libnov/shader hobnob/hobnob
        cp nov/target-gl/debug/nov hobnob/hobnob/nov-gl

    - name: hobnob-debug-linux-x86_64
      uses: actions/upload-artifact@v2
      with:
        name: hobnob-debug-linux-x86_64
        path: |
          hobnob

  debug-windows-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: debug-windows-x86_64
      run: |
        ./update.sh   # Clone all the git submodules.
        sudo apt-get update && sudo apt-get install -y curl python3 python3-dev python3-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev mingw-w64 libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
        cd libnov && ./install-python.sh && cd ..
        # exec "$SHELL"
        source $HOME/.bashrc
        rustup target add x86_64-pc-windows-gnu   # Add the mingw-w64 Rust target to cargo with the rustup command.
        rustup toolchain install stable-x86_64-pc-windows-gnu   # Install the Rust Windows cross-compiling tools for cargo with the rustup command.
        rustc --version && cargo --version  # Display rustc and cargo versions.
        cd nob && cargo build --target x86_64-pc-windows-gnu --verbose && cd ..   # Cross-compile the project for Windows, from Linux, with the cargo build command.
        cd nov && LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features vulkan,python --target x86_64-pc-windows-gnu --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-dx12 LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features dx12,python --target x86_64-pc-windows-gnu --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-dx11 LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features dx11,python --target x86_64-pc-windows-gnu --verbose && cd ..
        mkdir -p hobnob/hobnob
        cp nov/target/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob
        cp nob/target/x86_64-pc-windows-gnu/debug/nob.exe hobnob/hobnob
        cp -r libnov/data hobnob/hobnob
        cp -r libnov/shader hobnob/hobnob
        cp nov/target-dx12/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob/nov-dx12.exe
        cp nov/target-dx11/x86_64-pc-windows-gnu/debug/nov.exe hobnob/hobnob/nov-dx11.exe

    - name: hobnob-debug-windows-x86_64
      uses: actions/upload-artifact@v2
      with:
        name: hobnob-debug-windows-x86_64
        path: |
          hobnob

  release-linux-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: release-linux-x86_64
      run: |
        ./update.sh   # Clone all the git submodules.
        sudo apt-get update && sudo apt-get install -y curl python3 python3-dev python3-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
        cd libnov && ./install-python.sh && cd ..
        # exec "$SHELL"
        source $HOME/.bashrc
        rustc --version && cargo --version  # Display rustc and cargo versions.
        cd nob && cargo build --release --verbose && cd ..   # Build the project with the cargo build command.
        cd nov && LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features vulkan,python --release --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-gl,python LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features gl --release --verbose && cd ..
        strip -s nob/target/release/nob
        strip -s nov/target/release/nov
        strip -s nov/target-gl/release/nov
        mkdir -p hobnob/hobnob
        cp nov/target/release/nov hobnob/hobnob
        cp nob/target/release/nob hobnob/hobnob
        cp -r libnov/data hobnob/hobnob
        cp -r libnov/shader hobnob/hobnob
        cp nov/target-gl/release/nov hobnob/hobnob/nov-gl

    - name: hobnob-release-linux-x86_64
      uses: actions/upload-artifact@v2
      with:
        name: hobnob-release-linux-x86_64
        path: |
          hobnob

  release-windows-x86_64:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: release-windows-x86_64
      run: |
        ./update.sh   # Clone all the git submodules.
        sudo apt-get update && sudo apt-get install -y curl python3 python3-dev python3-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev mingw-w64 libx11-dev libvulkan-dev libxcb1-dev xorg-dev cmake   # Install OS-specific dependencies.
        cd libnov && ./install-python.sh && cd ..
        # exec "$SHELL"
        source $HOME/.bashrc
        rustup target add x86_64-pc-windows-gnu   # Add the mingw-w64 Rust target to cargo with the rustup command.
        rustup toolchain install stable-x86_64-pc-windows-gnu   # Install the Rust Windows cross-compiling tools for cargo with the rustup command.
        rustc --version && cargo --version  # Display rustc and cargo versions.
        cd nob && cargo build --target x86_64-pc-windows-gnu --release --verbose && cd ..   # Cross-compile the project for Windows, from Linux, with the cargo build command.
        cd nov && LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features vulkan,python --target x86_64-pc-windows-gnu --release --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-dx12,python LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features dx12 --target x86_64-pc-windows-gnu --release --verbose && cd ..
        cd nov && CARGO_TARGET_DIR=target-dx11,python LIBPYTHON_DIR="$(pyenv prefix)/lib" LIBPYTHON_NAME=$(basename $(ls -1t $(pyenv prefix)/lib/libpython* | head -n 1) | sed 's/lib//' | sed 's/\.a//') cargo build --features dx11 --target x86_64-pc-windows-gnu --release --verbose && cd ..
        strip -s nob/target/x86_64-pc-windows-gnu/release/nob.exe
        strip -s nov/target/x86_64-pc-windows-gnu/release/nov.exe
        strip -s nov/target-dx12/x86_64-pc-windows-gnu/release/nov.exe
        strip -s nov/target-dx11/x86_64-pc-windows-gnu/release/nov.exe
        mkdir -p hobnob/hobnob
        cp nov/target/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob
        cp nob/target/x86_64-pc-windows-gnu/release/nob.exe hobnob/hobnob
        cp -r libnov/data hobnob/hobnob
        cp -r libnov/shader hobnob/hobnob
        cp nov/target-dx12/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob/nov-dx12.exe
        cp nov/target-dx11/x86_64-pc-windows-gnu/release/nov.exe hobnob/hobnob/nov-dx11.exe

    - name: hobnob-release-windows-x86_64
      uses: actions/upload-artifact@v2
      with:
        name: hobnob-release-windows-x86_64
        path: |
          hobnob
